**Главная задача.** Составить программу, осуществляющую  *имитационное моделирование*  процесса, а также  визуализирующую этот процесс.

## Общие требования

* Необходимо провести с помощью разработанной программы исследование поведения моделируемого процесса, задавая для этого различные значения параметров, от которых он зависит. Будем называть такие параметры  _параметрами моделирования_, часто к их числу относится шаг моделирования - отрезок времени, измеряемый в тех или иных единицах времени (секундах, минутах, часах, днях и т.д.). Оптимальное число  параметров моделирования  - от трех до семи.

* Для проведения исследования, состоящего из  серии экспериментов  по моделированию процесса, перед началом каждого эксперимента пользователь должен иметь возможность устанавливать нужные значения параметров моделирования.

* Поскольку моделируемый процесс зависит от нескольких  неопределенных факторов, следует моделировать такие факторы при помощи случайных величин (можно заморочиться с распределениями [клац](#distr)).

* Программа должна быть спроектирована на основе методологии  объектно-ориентированного программирования, т.е. должна быть представлена в виде совокупности взаимодействующих друг с другом объектов, причем каждый объект является экземпляром определенного класса, а классы образуют иерархию. В ходе объектно-ориентированного проектирования необходимо выделить и зафиксировать логическую (классы и объекты) и физическую (модули) структуры программы.

* Программа должна быть организована как законченная система с удобным и понятным  интерфейсом, предусматривающим проведение экспериментов по моделированию, выдачу необходимых в ходе экспериментов подсказок и объяснений, а также окончание работы программной системы в любой момент.

## Содержание отчета

1. Уточненная формулировка задания (какая задача ставилась, что в целом сделано);

2. Диаграмма классов, показывающая выделенные классы и отношения между ними;

3. Спецификация основных классов программы, т.е. описание их интерфейса на С++,  с кратким комментарием на русском языке;

4. Диаграмма объектов, показывающая основные объекты и их связи;

5. Перечень использованных инструментальных средств - какие библиотеки С++ были использованы;

6. Описание модульной (файловой) структуры программы, т.е. список файлов с указанием классов, описанных в каждом файле;

7. Краткое описание пользовательского интерфейса, в том числе - вид диалогового окна для ввода параметров моделирования и диалогового окна, визуализирующего процесс моделирования.

# Методические рекомендации

### Как моделировать?

При моделировании и визуализации процессов, изменяемых во времени, наиболее простым для реализации является  _метод пошаговой фиксации_  (пересчета) всех характеристик (величин), определяющих текущее состояние рассматриваемого процесса. При этом выбирается *шаг* - отрезок времени, через который последовательно перевычисляются изменяемые характеристики процесса и производятся необходимые изменения в изображении на экране компьютера текущего состояния процесса (полную перерисовку изображения часто производить не надо).

**В нашем случае шагом моделирования является один день.**

Потому центральной частью программы в `main` должен быть примерно такой фрагмент:

```c++
for (int day = 1; day <= N; ++day) { ...
```

 В теле цикла происходит полное моделирование рабочего дня склада. А именно, "общение" необходимых объектов классов между собой (развоз товаров по торговым точкам, генерация новых заявок от торговых точек, завоз свежего товара и планирование перевозок на следующий день).

### Как проектировать?

Логическую структуру объектно-ориентированной системы образуют объекты и классы, их выявление (идентификация) - начальная задача объектно-ориентированного проектирования.

Объект - сущность, имеющая четко определенное функциональное назначение в рассматриваемой проблемной области, например: продукт, яйца, сахар, склад, полка склада, торговая точка и т.д.  Для выявления объектов полезно составить так называемый словарь проблемной области (задачи), в который входят все основные понятия этой области (ключевые абстракции) - как процедурные (глаголы), так и непроцедурные (существительные).

Объект характеризуется *состоянием* и *поведением*. Состояние объекта характеризуется перечнем (обычно статическим) всех свойств (атрибутов) данного объекта и текущими (обычно динамическими) значениями каждого из этих свойств. Например, для объекта “оптовая упаковка” свойствами будут: название товара, стоимость, срок годности, количество пачек, объем пачки и т.п.

Поведение объекта определяется выполняемыми над ним операциями и его состоянием, причем некоторые операции имеют побочное действие - они изменяют состояние. Примеры возможных операций над объектом “автомобиль”: переместить по дороге, нарисовать, создать.

При проектировании полезно иногда определить характер каждого объекта: активный объект может проявлять свое поведение без воздействия со стороны других объектов, а пассивный объект может изменять свое состояние только под воздействием других объектов.

Структура и поведение схожих объектов определяет общий для них класс (тип). Выделенные классы находятся в определенном отношении друг к другу. При проектировании необходимо определить эти отношения и зафиксировать в соответствующей  **_диаграмме классов_**. Возможны следующие отношения между двумя классами:

* наследование: отношение общего и частного;
* агрегация: отношение целого и части между экземплярами классов (объект-часть включается в состояние объекта-целого), например: "склад" и "помещение склада", "оптовая упаковка" и "товар"; агрегация может означать физическое вхождение одного объекта в другой, но не обязательно (в последнем случае оно скорее концептуальное);
* использование: связь между экземплярами классов, при которой один пользуется услугами другого (отношение “клиент-сервер”), например, отношения между объектами “склад” и “фирма-поставщик”.

**На диаграмме следует учитывать, что наследование и агрегация - связи направленные, а использование - ненаправленная связь.**

В ходе проектирования необходимо составить текстовые  **_спецификации классов_**, поясняющие диаграмму классов. Спецификация каждого класса представляет собой описание его интерфейса (внешнего поведения). Главное в интерфейсе - объявление операций, поддерживаемых экземплярами класса и краткие комментарии по основным неочевидным операциям.

Диаграмма классов должна быть дополнена при логическом проектировании  **_диаграммой объектов_**, показывающей, какие существуют объекты и связи между ними. Если диаграмма классов описывает структуру объектной системы, то диаграмма объектов -  ее поведение (совместное функционирование объектов). Связи объектов на диаграмме показывают пути передачи сообщений (вызовов операций) между ними, они должны быть помечены именем вызываемой операции, направление сообщения обозначается стрелкой, указывающей на объект, который предоставляет операцию (объект-сервер). Диаграмма объектов фиксирует таким образом механизм взаимодействия объектов, который разложен на операции классов.

Естественно, диаграммы классов и объектов должны быть согласованы: если объект X посылает объекту Y сообщение Q, то в соответствующей диаграмме классов должна быть надлежащая связь между классами этих объектов (и классы надлежащим образом специфицированы), так что сообщение действительно могло быть послано.

## Пошаговые рекомендации

1. Сперва нужно выписать основные понятия (глаголы + существительные), касающиеся проблемы.  Затем решить, какие будут классы, спроектировать диаграммы классов и объектов.
2. **Только после шага 1 открывать среду программирования!** Спланировать, как программа будет распределена по файлам и наметить эти файлы. Не нужно дробить вообще все в разные файлы, но и не следует писать все в одном. При выполнении заданий практикума разумно выделить в отдельные модули:
	* основную расчетную часть (математическую модель процесса),
	* процедуры визуализации модели,
	* процедуры организации интерфейса с пользователем.
Кроме этого, возможен также головной модуль, осуществляющий запуск всего приложения, в нем могут содержаться свободные процедуры (в терминологии С++), не относящиеся ни к одному из классов, и/или класс со статическими элементами (такой класс может рассматриваться как единственно возможный экземпляр самого себя).
3. Начать писать код и радоваться всем возможностям ООП :З  **Здраво соблюдаем стайлгайд.**
4. Запустить эксперимент по моделированию. Запуск программы должен наглядно демонстрировать всю статистическую информацию, чтобы можно было сделать здравые выводы о стратегиях закупки товаров у фирмы-поставщика.
5. <a name="distr"></a>Для генерации случайной ситуации используйте хороший генератор псевдослучайных чисел `std::mt19937` и  равномерное распределение.
```c++
	std::mt19937 gen(seed);
	std::uniform_int_distribution<> dis;
	std::cout << dis(gen); // get a uniformly distributed random number
```
Генераторов в коде нужно делать как можно меньше (идеально - один), распределений - сколько угодно. Если хочется использовать разные распределения, велкам [cppreference](https://en.cppreference.com/w/cpp/numeric/random).


## Литература

 * [Г. Шилдт. Базовый курс (главы 11-15).](https://www.bsuir.by/m/12_100229_1_98220.pdf)
 * [Буч Г. Классы и объекты (при проектировании)](http://vmk.ugatu.ac.ru/book/buch/ch03.htm)
 * [Виды распределений в С++](https://en.cppreference.com/w/cpp/numeric/random)
 * [Википедия. Агрегация](https://ru.wikipedia.org/wiki/%D0%90%D0%B3%D1%80%D0%B5%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29)
